apply plugin: 'com.android.library'

apply plugin: 'com.jfrog.bintray'//添加bintray插件
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.ml.miniorm2'

version='2.1.0'

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

/*task generateJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs //source指定了源码位置
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}*/

//这里dependsOn意为仅当generateJavadocs完成后才开始本task，和ant脚本也是对应的。
/*task generateJavadocsJar(type: Jar, dependsOn: generateJavadocs) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}*/
artifacts {
    // archives generateJavaDocsJar
    archives generateSourcesJar
}


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    pkg {
        repo = 'Maven'
        name = 'com.ml.miniorm2'

        version {
            name = '2.1.0-release'
            desc = "A lightweight Android database persistence tool class library "
            vcsTag = '2.1.0'
        }

        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/MengLeiGitHub/miniOrm-for-android.git'
        websiteUrl = 'https://github.com/MengLeiGitHub/miniOrm-for-android'
        publish = true

    }

    configurations = ['archives']

}


import com.android.build.gradle.LibraryPlugin
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
   //     classpath 'com.android.tools.build:gradle:2.1.2'
        classpath 'org.aspectj:aspectjtools:1.8.9'
        classpath 'org.aspectj:aspectjweaver:1.8.9'
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"


    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    compile 'org.aspectj:aspectjrt:1.8.9'


}


android.libraryVariants.all { variant ->
    LibraryPlugin plugin = project.plugins.getPlugin(LibraryPlugin)
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", plugin.project.android.bootClasspath.join(
                File.pathSeparator)]

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler)

        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
